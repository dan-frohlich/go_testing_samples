// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Mashup mocks base method
func (m *MockService) Mashup(query string) []Mashup {
	ret := m.ctrl.Call(m, "Mashup", query)
	ret0, _ := ret[0].([]Mashup)
	return ret0
}

// Mashup indicates an expected call of Mashup
func (mr *MockServiceMockRecorder) Mashup(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mashup", reflect.TypeOf((*MockService)(nil).Mashup), query)
}

// MockCatalog is a mock of Catalog interface
type MockCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogMockRecorder
}

// MockCatalogMockRecorder is the mock recorder for MockCatalog
type MockCatalogMockRecorder struct {
	mock *MockCatalog
}

// NewMockCatalog creates a new mock instance
func NewMockCatalog(ctrl *gomock.Controller) *MockCatalog {
	mock := &MockCatalog{ctrl: ctrl}
	mock.recorder = &MockCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatalog) EXPECT() *MockCatalogMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockCatalog) Search(query string) []SearchHit {
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]SearchHit)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockCatalogMockRecorder) Search(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCatalog)(nil).Search), query)
}

// Get mocks base method
func (m *MockCatalog) Get(id string) Product {
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(Product)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockCatalogMockRecorder) Get(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCatalog)(nil).Get), id)
}

// MockTweetAPI is a mock of TweetAPI interface
type MockTweetAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTweetAPIMockRecorder
}

// MockTweetAPIMockRecorder is the mock recorder for MockTweetAPI
type MockTweetAPIMockRecorder struct {
	mock *MockTweetAPI
}

// NewMockTweetAPI creates a new mock instance
func NewMockTweetAPI(ctrl *gomock.Controller) *MockTweetAPI {
	mock := &MockTweetAPI{ctrl: ctrl}
	mock.recorder = &MockTweetAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTweetAPI) EXPECT() *MockTweetAPIMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockTweetAPI) Query(query string) []Tweet {
	ret := m.ctrl.Call(m, "Query", query)
	ret0, _ := ret[0].([]Tweet)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockTweetAPIMockRecorder) Query(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTweetAPI)(nil).Query), query)
}
